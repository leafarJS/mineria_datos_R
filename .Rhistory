gss_cat %>%
count(tvhours)
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours
))+
geom_bar()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours
))+
geom_col()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours
))+
geom_histogram()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col()+
scale_y_log10()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col(width = 0.5)+
scale_y_log10()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col(width = 1.5)+
scale_y_log10()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col(width = 1)+
scale_y_log10()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col(width = 1)+
scale_x_log10()+
coord_flip()
gss_cat %>%
count(tvhours) %>%
ggplot(aes(
tvhours,
n
))+
geom_col(width = 1)
mean(gss_cat$tvhours)
mean(gss_cat$tvhours, na.rm = TRUE)
str(gss_cat)
gss_cat %>%
count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Republicano Fuerte" = "Strong republican",
"Republicano Debil" = "Not str republican",
"Independente, cerca a Rep" = "Ind,near rep",
"Independent, cerca a Dem" = "Ind,near dem",
"Democrata Debil" = "Not str democrat",
"Democrata Fuerte"= "Strong democrat"
)) %>%
count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"No Responde" = "No answer",
"No sabe" = "Don't know",
"Otro Partido" = "Other party"
"Republicano Fuerte" = "Strong republican",
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"No Responde" = "No answer",
"No sabe" = "Don't know",
"Otro Partido" = "Other party",
"Republicano Fuerte" = "Strong republican",
"Republicano Debil" = "Not str republican",
"Independente, cerca a Rep" = "Ind,near rep",
"Independent, cerca a Dem" = "Ind,near dem",
"Democrata Debil" = "Not str democrat",
"Democrata Fuerte"= "Strong democrat",
"Independiente" = "Independent"
)) %>%
count(partyid)
Independiente
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"No Responde" = "No answer",
"No sabe" = "Don't know",
"Otro Partido" = "Other party",
"Republicano Fuerte" = "Strong republican",
"Republicano Debil" = "Not str republican",
"Independente, cerca a Rep" = "Ind,near rep",
"Independente cerca a Dem" = "Ind,near dem",
"Democrata Debil" = "Not str democrat",
"Democrata Fuerte"= "Strong democrat",
"Independiente" = "Independent"
)) %>%
count(partyid)
gss_cat %>%
mutate(partyid = fct_recode(partyid,
"Otros" = "No answer",
"Otros" = "Don't know",
"Otros" = "Other party",
"Republicano Fuerte" = "Strong republican",
"Republicano Debil" = "Not str republican",
"Independente, cerca a Rep" = "Ind,near rep",
"Independente, cerca a Dem" = "Ind,near dem",
"Democrata Debil" = "Not str democrat",
"Democrata Fuerte"= "Strong democrat",
"Independiente" = "Independent"
)) %>%
count(partyid)
gss_cat %>%
mutate(partyid = fct_collapse(partyid,
Otros = c("No answer", "Don't know", "Other party"),
Republicanos = c("Strong republican", "Not str republican"),
Independientes = c("Ind,near rep", "Independent", "Ind,near dem"),
Democratas = c("Not str democrat", "Strong democrat")
)) %>%
count(partyid)
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
gss_cat %>%
mutate(relig = fct_lump(relig, 6)) %>%
count(relig)
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig, sort = TRUE)
gss_cat %>%
mutate(relig = fct_lump(relig, 6)) %>%
count(relig, sort = TRUE)
gss_cat %>%
mutate(relig = fct_lump(relig)) %>%
count(relig)
gss_cat %>%
mutate(relig =  fct_lump(relig, 10)) %>%
count(relig, sort = TRUE)
gss_cat %>%
mutate(relig =  fct_lump(relig, 10),
prom = n/sum(n)) %>%
count(relig, sort = TRUE)
gss_cat %>%
mutate(relig =  fct_lump(relig, 10)) %>%
count(relig, sort = TRUE) %>%
mutate(prom = n/sum(n))
gss_cat %>%
mutate(relig =  fct_lump(relig, 10)) %>%
count(relig, sort = TRUE) %>%
mutate(prom = round(n/sum(n),3))
library(tidyverse)
library(dplyr)
library(tidytext)
library(ggplot2)
library(igraph)
library(ggraph)
library(widyr)
# Fechas y Horarios
library(lubridate)
library(nycflights13)
# paquete hms para manejo de horas
today()
now()
# desde cadenas
ymd()
# desde cadenas
ymd("2022-12-21")
mdy("January 31st 2023")
dmy("31-Jan-2017")
ymd(20221221)
ymd_hms("2022-12-21 09:31:42")
mdy_hm("12/21/2022 09:30")
ymd(20221221, tz = "UTC")
# de componentes individuales
flights
# de componentes individuales
flights %>%
select(year, month, day, hour, minute)
# Para crear una fecha/hora a partir de este tipo de entrada
flights %>%
select(year, month, day, hour, minute) %>%
mutate(departure = make_datetime(year, month, day, hour, minute))
# de componentes individuales
view(flights)
make_datetime_100  <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time")) %>%
view()
flights_dt %>%
ggplot(aes(
dep_time
))+
geom_freqpoly()
flights_dt %>%
ggplot(aes(
dep_time
))+
geom_freqpoly(binwidth = 86400) #86400 seconds = 1 day
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(
dep_time
))+
geom_freqpoly(binwidth = 600) #600 seconds = 10 minutes
as_datetime(today())
as_date(now())
# Si el desplazamiento está en segundos, use as_datetime(); si es en días, use as_date().
as_datetime(60*60*10)
as_date(365*10+2)
ymd(c("2010-10-10", "bananas"))
mdy(d1)
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14"
mdy(d1)
ymd(d2)
dmy(d3)
mdy(d4)
dmy(d5)
mdy(d5)
datetime <- ymd_hms("2022-12-21 12:42:00")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
#ver que dia salen mas vuelos
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(
wday
))+
geom_bar()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
view()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(
minute,
avg_delay
))+
geom_line()
theme_set(theme_minimal())
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(
minute,
avg_delay
))+
geom_line()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
ggplot(aes(
minute,
avg_delay
))+
geom_line()+
expand_limits(y = 0)
sched_dep <- flights_dt %>%
mutate(minute = minute(sched_dep_time)) %>%
group_by(minute) %>%
summarise(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()
) %>%
view()
sched_dep %>%
ggplot(aes(
minute,
avg_delay
))+
geom_line()
sched_dep %>%
aes(
minute,
n
)+
geom_line()
sched_dep %>%
ggplot(aes(
minute,
n
))+
geom_line()
flights_dt %>%
count(week = floor_date(dep_time, "week"))
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(
week,
n
))+
geom_line
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(
week,
n
))+
geom_line()
flights_dt %>%
count(week = floor_date(dep_time, "month"))
flights_dt %>%
count(week = floor_date(dep_time, "year"))
flights_dt %>%
count(week = floor_date(dep_time, "week"))
flights_dt %>%
count(week = floor_date(dep_time, "month"))
flights_dt %>%
count(week = floor_date(dep_time, "year"))
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(
week,
n
))+
geom_line()
# Componentes de ajuste
(datetime <- ymd_hms("2022-12-21 13:07:00"))
year(datetime) <- 2020
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
datetime
# modificación total
update(
datetime,
year = 1977,
month = 2,
mday = 3,
hour = 2
)
# si nos pasamos de numero de dias en el mes
ymd("2022-02-30")
# si nos pasamos de numero de dias en el mes
ymd("2022-02-30") %>%
update(mday = 30)
# si nos pasamos de numero de dias en el mes
ymd("2022-02-01") %>%
update(mday = 30)
ymd("2022-02-01") %>%
update(hour = 400)
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
view()
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(
dep_hour
))+
geom_freqpoly(binwidth = 300)
# En R, cuando restas dos fechas, obtienes un objeto difftime:
h_age <- today() - ymd(19770203)
h_age
as.duration(h_age)
dseconds(15)
dminutes(55)
dhours(12)
dhours(c(1,3,6,12,24))
ddays(0:5)
dweeks(3)
dyears(1)
dyears(1)* h_age
dyears(1) * h_age
dyears(1) * 45
4 * dyears(2)
dyears(2) +  dweeks(18) + dhours(13.5)
tomorrow <- today() + ddays(4)
tomorrow
last_year <- today() - dyears(45)
last_year
one_pm <- ymd_hms("2016-03-12 13:00:00", tz = "America/New_York")
one_pm
#> [1] "2016-03-12 13:00:00 EST"
one_pm + ddays(1)
one_pm
one_pm + days(1)
seconds(15)
minutes(10)
minutes(10.18)
minutes(10)
hours(c(1,3,6,12,24))
days(7)
months(1:6)
weeks(3)
years(1)
10 * (months(6) + days(15))
10 * (months(6) + days(15)) + days(50) + hours(25) + minutes(12)
10 * (months(6) + days(15)) + days(50) + hours(25) + minutes(12) + seconds(32)
# A leap year
ymd("2016-01-01") + dyears(1)
#> [1] "2016-12-31 06:00:00 UTC"
ymd("2016-01-01") + years(1)
# Daylight Savings Time
one_pm + ddays(1)
#> [1] "2016-03-13 14:00:00 EDT"
one_pm + days(1)
flights_dt
flights_dt %>%
filter(arr_time < dep_time)
flights_dt %>%
filter(arr_time < dep_time) %>%
view()
flights_dt_1 <- flights_dt %>%
mutate(
overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1 )
) %>%
view()
flights_dt_1 %>%
filter(overnight, arr_time < dep_time)
# Intervalos
years(1) / days(1)
next_year <- today() + years(1)
next_year
(today() %--% next_year)
(today() %--% next_year) / ddays(1)
(today() %--% next_year) %/% ddays(1)
days(overnight * 1)
(today() %--% (today() + years(1))) / months(1)
(today() %--% (today() + years(1))) / months(12)
# Zonas Horarias
# zona horaria actual segun ubicación en R
Sys.timezone()
# nombres de zonas horarias
OlsonNames()
length(OlsonNames())
(x1 <- ymd_hms("2022-12-01 12:00:00", tz = "America/New_York"))
(x2 <- ymd_hms("2022-12-01 18:00:00", tz = "Europe/Copenhagen"))
(x3 <- ymd_hms("2022-12-02 04:00:00", tz = "America/Caracas"))
x1 - x2
x2 - x3
x4 <- c(x1,x2,x3)
x4
x4a <-with_tz(x4, tzone = "America/Caracas")
x4a
x4a - x4
x4b <- force_tz(x4, tzone = "Australia/Lord_Howe")
x4b
x4b - x4
