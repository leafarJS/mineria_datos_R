rescale01(x)
corto_circuito <-function(x, y, op) {
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!")
)
}
corto_circuito(10,30,18)
corto_circuito <-function(x, y, op) {
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!")
)
df <- data.frame(plus, minus, times, divide)
return(df)
}
corto_circuito(10,30,18)
corto_circuito(10,30, plus)
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!")
)
corto_circuito <-function(x, y, op) {
switch(op,
plus = x + y,
minus = x - y,
times = x * y,
divide = x / y,
stop("Unknown op!")
)
}
corto_circuito(10,30, plus)
corto_circuito(10,30, "plus")
corto_circuito(10,30, "divide")
y <- 10
x <- if (y < 20) "Too low" else "Too high"
x
# Compute confidence interval around mean using normal approximation
mean_ci <- function(x, conf = 0.95) {
se <- sd(x) / sqrt(length(x))
alpha <- 1 - conf
mean(x) + se * qnorm(c(alpha / 2, 1 - alpha / 2))
}
x <- runif(100)
mean_ci(x) # 0.4976111 0.6099594
mean_ci(x, conf = 0.99) # 0.4799599 0.6276105
wt_mean <- function(x, w) {
if (length(x) != length(w)) {
stop("`x` and `w` must be the same length", call. = FALSE)
}
sum(w * x) / sum(w)
}
wt_mean(1:6, 1:3)
wt_mean(1:10, 2:11)
wt_mean <- function(x, w, na.rm = FALSE) {
stopifnot(is.logical(na.rm), length(na.rm) == 1)
stopifnot(length(x) == length(w))
if (na.rm) {
miss <- is.na(x) | is.na(w)
x <- x[!miss]
w <- w[!miss]
}
sum(w * x) / sum(w)
}
wt_mean(1:6, 6:1, na.rm = "foo")
wt_mean(1:6, 1:6, na.rm = "foo")
wt_mean(1:6, 1:6, na.rm = TRUE)
wt_mean(5:10, 5:10)
sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)# 55
stringr::str_c("a", "b", "c", "d", "e", "f")# "abcdef"
commas <- function(...) stringr::str_c(..., collapse = ", ")
commas(letters[1:10]) # "a, b, c, d, e, f, g, h, i, j"
rule <- function(..., pad = "-") {
title <- paste0(...)
width <- getOption("width") - nchar(title) - 5
cat(title, " ", stringr::str_dup(pad, width), "\n", sep = "")
}
rule("Important output")# Important output -------------
library(tidyverse)
typeof(letters)
typeof(1:20)
#longitud
x <- list("a", "b", 1:20)
length(x)
# logicos
1:10 %% 3 == 0
c(TRUE, FALSE, FALSE NA)
c(TRUE, FALSE, FALSE, NA)
# numérico
typeof(1)
typeof(1L)
1.5L
x <- sqrt(2) ^ 2
x
x - 2
x
c(-1,0,1) / 0
x <- c(1,2,1/8,NA)
is.infinite(x)
x <- c(1,2,1/8,NA, NaN, Inf, -Inf)
is.infinite(x)
is.finite(x)
is.na(x)
is.nan(x)
x <- "Esta es una cadena razonablemente larga"
pryr::object_size(x)
y <- rep(x, 1000)
pryr::object_size(y)
NA            # logical  NA
NA_integer_   # integer  NA
NA_real_      # double   NA
NA_character_ # character NA
x <- sample(1:10)
x
dplyr::near(x)
dplyr::near(x, 8)
x <- sample(20,100, replace = TRUE)
X
x <- sample(20,100, replace = TRUE)
x
y <- x > 10
y
sum(y)
mean(y)
typeof(c(TRUE, 1L))
typeof(c(1L,1.5))
typeof(c(1.5, "a"))
x <- c(1,2,3,"a", NA, NaN, 1.5, 8L, -Inf, Inf, NULL)
is_logical(x)
is_integer(x)
x <- c(1,2,3,"a", NA, NaN, 1.5, 8L, -Inf, Inf, NULL)
is_logical(x)
is_integer(x)
is_double(x)
is_numeric(x)
is_character(x)
is_atomic(x)
is_list(x)
is_vector(x)
sample(10) + 100
runif(10) > 5
runif(10) > 0.5
1:10 + 1:2
1:10 + 1:3
tibble(x = 1:4, y = 1:2)
tibble(x = 1:4, y = rep(1:2, 2))
tibble(x = 1:4, y = rep(1:2, each = 2))
c(x = 1, y = 2, z = 3)
purrr::set_names(1:3, c("a", "b", "c"))
x <- c("one", "two", "three", "four", "five")
x[c(3,2,5)]
x[c(1,1,5,5,5,2,4)]
c[c(-1,-5)]
x[c(-1,-5)]
x[c(1,-1)]
x[0]
x <- c(10, 3, NA, 5, 8, 1, NA)
x <- c(10, 3, NA, 5, 8, 1, NA)
x[!is.na(x)]
x[x %% 2 == 0]
x <- c(abc = 1, def = 2, xyz = 5)
x[c("xyz", "def")]
# vectores recursivos
x <- list(1,2,3)
x
str(x)
x <- list(a= 1, b = 2, c = 3)
str(x)
x <- list("a", 1L, 1.5, TRUE)
str(x)
x <- list(list(1, 2, "a", FALSE), list(3, 4, -Inf))
str(x)
# visualización de listas
x <- list(c(1,2), c(3,4))
y <- list(list(1,2), list(3,4))
z <- list(1, list(2, list(3)))
# creacion de subconjuntos
x <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
str(x[1:2])
str(x[4])
str(x[[1]])
str(x[[4]])
x$a
x$d
x$d[1]
x$d
x$d[1]
# atributos
x <- 1:10
attr(x)
attr(x, "greeting")
attr(x, "greeting") <- "Hi!"
attr(x, "greeting") <- "Bye!"
attributes(x)
attr(x, "greeting") <- "Hi!"
attr(x, "greeting") <- "Bye!"
attributes(x)
attr(x, "greeting") <- "Hi!"
attr(x, "farewell") <- "Bye!"
attributes(x)
# Así es como se ve una función genérica típica:
as.Date()
# Así es como se ve una función genérica típica:
as.Date
methods("as.Date")
getS3method("as.Date", "default")
getS3method("as.Date", "default")
getS3method("as.Date", "numeric")
# factores
x <- factor(c("ab", "cd", "ab"), levels = c("ab", "cd", "ef"))
x
typeof(x)
attributes(x)
# fechas y fechas-horas
x <- as.Date("1977-02-03")
unclass(x)
typeof(x)
attributes(x)
x <- lubridate::ymd_hm("1970-01-01 01:00")
unclass(x)
attr(, "tzone")
attr(x, "tzone")
typeof(x)
attributes(x)
attr(x, "tzone") <- "US/Pacific"
x
attr(x, "tzone") <- "US/Eastern"
x
y <- as.POSIXlt(x)
y
typeof(y)
attributes(y)
x <- tibble::tibble(x = 1:5, y = 5:1)
x
typeof(x)
attributes(x)
x <- tibble::tibble(x = 1:5, y = 5:1)
x
typeof(x)
attributes(x)
x <- data.frame(x = 1:5, y = 5:1)
x
typeof(x)
attributes(x)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
library(tidyverse)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
#> [1] -0.24576245 -0.28730721 -0.05669771  0.14426335
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
output[[i]] <- median(df[[i]])      # 3. body
}
output
x <- vector("double", 15)
seq_along(x)
1:length(x)
1:length(x)
1:length(x)
seq_along(x)
# media de cada columna de mtcars
mtcars
mtcars[,2:length(mtcars)]
mtcars[,1:length(mtcars)]
# media de cada columna de mtcars
head(mtcars,3)
head(mtcars[,1:length(mtcars)],3)
head(mtcars[,2:length(mtcars)],3)
head(mtcars[2:length(mtcars)],3)
head(mtcars[0:length(mtcars)],3)
head(mtcars[0:1,length(mtcars)],3)
head(mtcars[0:1,length(mtcars)],3)
# media de cada columna de mtcars
head(mtcars,3)
head(mtcars[0:1,length(mtcars)],3)
head(mtcars[1,length(mtcars)],3)
head(mtcars[length(mtcars)],3)
head(mtcars[,length(mtcars)],3)
head(mtcars[,length(mtcars)],3)
# media de cada columna de mtcars
head(mtcars,3)
head(mtcars[,length(mtcars)],3)
head(mtcars[,1:length(mtcars)],3)
head(mtcars[,2:length(mtcars)],3)
head(mtcars[,12:length(mtcars)],3)
head(mtcars[,1:length(mtcars)],3)
head(mtcars[,0:length(mtcars)],3)
head(mtcars[,0:length(mtcars)],3)
head(mtcars[1,0:length(mtcars)],3)
head(mtcars[2,0:length(mtcars)],3)
head(mtcars[3,0:length(mtcars)],3)
head(mtcars[-1,0:length(mtcars)],3)
mtcars[0:0]
mtcars[0:1]
mtcars[0:1:5]
mtcars[1:1:5]
mtcars[1,1:5]
mtcars
mtcars[1,1:5]
mtcars[-1,1:5]
output <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output[[i]] <- median(mtcars[[i]])
}
output
output <- vector("double", ncol(mtcars))
for (i in seq_along(mtcars)) {
output[[i]] <- median(mtcars[[i]])
}
output
head(mtcars, 2)
median(mtcars[2])
median(mtcars[,2])
median(mtcars[,1])
nycflights13::flights
output <- vector("double", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- str(mtcars[[i]])
}
output <- vector("double", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- str(mtcars[[i]])
}
output <- vector("double", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- typeof(mtcars[[i]])
}
output <- vector("double", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- typeof(mtcars[[i]])
}
output[[i]] <- class(mtcars[[i]])
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- class(mtcars[[i]])
}
output <- vector("double", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- class(mtcars[[i]])
}
typeof(nycflights13::flights[,2])
typeof(nycflights13::flights[,2])
typeof(nycflights13::flights[,3])
typeof(nycflights13::flights[,4])
nycflights13::flights[,2]
nycflights13::flights
nycflights13::flights
typeof(nycflights13::flights[,2])
typeof(nycflights13::flights[,3])
classf(nycflights13::flights[,2])
class(nycflights13::flights[,2])
class(nycflights13::flights[,3])
typeof(nycflights13::flights[,4])
class(nycflights13::flights[,3])
class(nycflights13::flights[,2])
str(nycflights13::flights[,2])
str(nycflights13::flights[,3])
output <- vector("character", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- str(mtcars[[i]])
}
output <- vector("character", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- str(nycflights13::flights[[i]])
}
output <- vector("character", ncol(nycflights13::flights))
for (i in seq_along(nycflights13::flights)) {
output[[i]] <- str(nycflights13::flights[[i]])
}
output <- ""
for (i in letters) {
output <- stringr::str_c(output, i)
}
output
x <- sample(100)
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
x <- sample(100)
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
sd
x <- sample(1000)
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
sd <- sqrt(sd / (length(x) - 1))
sd
x <- sample(3)
x
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
x <- sample(10)
x
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
x <- sample(10)
x
output <- 0
for (i in seq_along(x)) {
sd <- output + (x[i] - mean(x)) ^ 2
}
sd
mean(x)
mean(x)^2
x <- runif(100)
x
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
l
x <- runif(100)
x
out <- vector("numeric", length(x))
output[1] <- x[1]
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
output
output
x
output
2:length(x)
length(x)
1:length(x)
x <- runif(100)
x
output <- vector("numeric", length(x))
output[1] <- x[1]
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
x <- runif(100)
x
output <- vector("numeric", length(x))
output[1] <- x[1]
output
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
0.2551+0.7386
x <- runif(100)
x
output <- vector("numeric", length(x))
output <- 0
output
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
x <- runif(100)
x
output <- vector("numeric", length(x))
output <- 0
output
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
output <- vector("numeric", length(x))
output[1] <- x[1]
output
for (i in 2:length(x)) {
output[i] <- output[i - 1] + x[i]
}
output
