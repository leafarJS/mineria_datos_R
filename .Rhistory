y = word
))+
geom_col()+
labs(y= NULL)
tidy_libro %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col()+
labs(y= NULL)+
theme_minimal()
tidy_libro %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col(aes(color = word))+
labs(y= NULL)+
theme_minimal()
tidy_libro %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col(aes(fill = word))+
labs(y= NULL)+
theme_minimal()
tidy_libro %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col(aes(fill = word))+
labs(y= NULL)+
theme_minimal()+
theme(legend.position = NULL)
tidy_libro %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col(aes(fill = word))+
labs(y= NULL)+
theme_minimal()+
theme(legend.position = "none")
library(gutenbergr)
install.packages("gutengergr")
#1.5 Frecuencias de palabras
devtools::install_github("ropensci/gutenbergr")
hgwells <- gutenberg_download(c(35,36,5230,159))
devtools::install_github("ropensci/gutenbergr")
hgwells <- gutenberg_download(c(35,36,5230,159))
hgwells <- gutenberg_download(c(35,36,5230,159))
library(gutenbergr)
library(gutenbergr)
hgwells <- gutenberg_download(c(35,36,5230,159))
tidy_hgwells <- hgwells %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_hgwells %>%
count(word, sort = TRUE) %>%
View()
?gutenberg_download()
# download The Count of Monte Cristo
dummas <- gutenberg_download(1184)
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
view()
# download The Count of Monte Cristo
dummas <- gutenberg_download(1184) %>%
view()
view()
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767) %>%
view()
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767) %>%
# download The Count of Monte Cristo
bronte <- gutenberg_download(c(1260, 768, 969, 9182, 767) %>%
tidy_bronte <-bronte %>%
view()
# download The Count of Monte Cristo
dummas <- gutenberg_download(1184)
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words)
tidy_dummas %>%
count(word, sort = TRUE)
tidy_dummas %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word
))+
geom_col(aes(fill = word))+
labs(y= NULL)+
theme_minimal()+
theme(legend.position = "none")
#unir los libros analizados
frecuencia <- bind_rows(mutate(tidy_dummas, author = "Alejandro Dummas"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_libro, author = "Jane Austen")) %>%
view()
#unir los libros analizados
frecuencia <- bind_rows(mutate(tidy_dummas, author = "Alejandro Dummas"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_libro, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proporcion = n / sum(n)) %>%
select(-n) %>%
view()
#unir los libros analizados
frecuencia <- bind_rows(mutate(tidy_dummas, author = "Alejandro Dummas"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_libro, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proporcion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = author, values_from = proporcion) %>%
view()
frecuencia <- bind_rows(mutate(tidy_dummas, author = "Alejandro Dummas"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_libro, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proporcion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = author, values_from = proporcion) %>%
pivot_longer(`Alejandro Dummas`:`H.G. Wells`,
names_to = "author", values_to = "proporcion")
frecuencia <- bind_rows(mutate(tidy_dummas, author = "Alejandro Dummas"),
mutate(tidy_hgwells, author = "H.G. Wells"),
mutate(tidy_libro, author = "Jane Austen")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(author, word) %>%
group_by(author) %>%
mutate(proporcion = n / sum(n)) %>%
select(-n) %>%
pivot_wider(names_from = author, values_from = proporcion) %>%
pivot_longer(`Alejandro Dummas`:`H.G. Wells`,
names_to = "author", values_to = "proporcion") %>%
view()
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter()
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter(alpha = 0.1,
size = 2.5,
width = 0.3,
height = 0.3)
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter(alpha = 0.1,
size = 2.5,
width = 0.3,
height = 0.3)+
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5)
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter(alpha = 0.1,
size = 2.5,
width = 0.3,
height = 0.3)+
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5)+
scale_x_log10(labels = percent_format())+
scale_y_log10(labels = percent_format())
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter(alpha = 0.1,
size = 2.5,
width = 0.3,
height = 0.3)+
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5)+
scale_x_log10(labels = percent_format())+
scale_y_log10(labels = percent_format())+
scale_color_gradient(limits = c(0, 0.001),
low  = "darkslategray4",
high = "gray75")
frecuencia %>%
ggplot(aes(
x = proporcion,
y = `Jane Austen`,
color = abs(`Jane Austen` - proporcion)
))+
geom_abline(color = "gray40", lty = 2)+
geom_jitter(alpha = 0.1,
size = 2.5,
width = 0.3,
height = 0.3)+
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5)+
scale_x_log10(labels = percent_format())+
scale_y_log10(labels = percent_format())+
scale_color_gradient(limits = c(0, 0.001),
low  = "darkslategray4",
high = "gray75")+
facet_wrap(~author, ncol = 2)+
theme(legend.position = "none")+
labs(y = "Jane Austen", x = NULL)
cor.test(data = frecuencia[frecuencia$author == "Alejandro Dummas",],
~ proporcion + `Jane Austen`)
cor.test(data = frecuencia[frecuencia$author == "H.G. Wells",],
~ proporcion + `Jane Austen`)
library(tidytext)
get_sentiments("afinn")
install.packages("afinn")
install.packages("AFINN")
devtools::install_github("ropensci/gutenbergr")
library(gutenbergr)
library(dplyr)
library(stringr)
dummas <- gutenberg_download(1184) %>%
view()
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
view()
tidy_dummas %>%
count(word, sort = TRUE) %>%
View()
get_sentiments("nrc")
install.packages("NRC")
get_sentiments("bing")
dummas <- gutenberg_download(1184) %>%
view()
data("stop_words")
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
view()
tidy_dummas %>%
count(word, sort = TRUE) %>%
View()
bing_sentimento <-   get_sentiments("bing") %>%
filter(sentiment = "negative")
bing_sentimento <-   get_sentiments("bing") %>%
filter(sentiment == "negative")
tidy_dummas %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
view()
tidy_dummas <- dummas %>%
unnest_tokens(word, text) %>%
anti_join(stop_words) %>%
view()
tidy_dummas %>%
filter(gutengberg_id == "1184") %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas %>%
filter(gutengberg_id == 1184) %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas %>%
filter(word) %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE) %>%
View()
tidy_dummas %>%
filter(word) %>%
view()
tidy_count <-tidy_dummas %>%
count(word, sort = TRUE)
tidy_count %>%
filter(word) %>%
view()
tidy_count %>%
select(word) %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE) %>%
View()
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_austen <- austen_books() %>%
group_by(book) %>%
mutate(
numero_linea = row_number(),
capitulo = cumsum(str_detect(text,
regex("^capitulo[\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_austen %>%
filter(book == "Emma") %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE) %>%
View()
bing_sentimento_1 <- get_sentiments("bing") %>%
filter(sentiment == "positive")
tidy_austen %>%
filter(book == "Emma") %>%
inner_join(bing_sentimento_1) %>%
count(word, sort = TRUE) %>%
View()
bad <- tidy_austen %>%
filter(book == "Emma") %>%
inner_join(bing_sentimento) %>%
count(word, sort = TRUE)
good <- tidy_austen %>%
filter(book == "Emma") %>%
inner_join(bing_sentimento_1) %>%
count(word, sort = TRUE) %>%
View()
good <- tidy_austen %>%
filter(book == "Emma") %>%
inner_join(bing_sentimento_1) %>%
count(word, sort = TRUE)
jane_austen_sentimientos <-tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = numero_linea %/% 80 sentiment) %>%
jane_austen_sentimientos <-tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
view()
jane_austen_sentimientos <-tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = numero_linea %/% 80 sentiment) %>%
jane_austen_sentimientos <-tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = numero_linea %/% 80, sentiment) %>%
view()
jane_austen_sentimientos <-tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = numero_linea %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment,
values_from = n,
values_fill = 0) %>%
mutate(sentiment = positive - negative) %>%
view()
library(ggplot2)
jane_austen_sentimientos %>%
ggplot(aes(
x = index,
y = sentiment,
fill = book
))+
geom_col(show.legend = FALSE)
jane_austen_sentimientos %>%
ggplot(aes(
x = index,
y = sentiment,
fill = book
))+
geom_col(show.legend = FALSE)+
facet_wrap(~book,
ncol = 2,
scales = "free_x")
bing_palabras_contadas <- tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup() %>%
View()
bing_palabras_contadas %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word,
fill = sentiments
))+
geom_col()
bing_palabras_contadas %>%
group_by(sentiment) %>%
view()
bing_palabras_contadas <- tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_palabras_contadas %>%
group_by(sentiment)
bing_palabras_contadas %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word,
fill = sentiments
))+
geom_col()
bing_palabras_contadas %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word,
fill = sentiments
))+
geom_col(show.legend = FALSE)+
facet_wrap(~sentiment, scales = "free_y")+
labs(x = "Contribuyen al sentimiento",
y = "")
bing_palabras_contadas %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = fct_reorder(word, n)) %>%
ggplot(aes(
x = n,
y = word,
fill = sentiment
))+
geom_col(show.legend = FALSE)+
facet_wrap(~sentiment, scales = "free_y")+
labs(x = "Contribuyen al sentimiento",
y = "")
library(wordcloud)
install.packages("worldcloud")
install.packages(c("wordcloud","tm"),repos="http://cran.r-project.org")
library(wordcloud)
library(tm)
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(worldcloud(word, n, max.words = 100))
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 50))
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 36))
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 27))
tidy_austen %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
install.packages("reshape2")
library(reshape2)
tidy_austen %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0 ) %>%
comparison.cloud(colors = c("gray20", "gray80"), max.words = 100)
