filter(!word2 %in% stop_words$word)
bigrams.filtered
# new bigram counts:
bigram.counts <- bigrams.filtered %>%
count(word1, word2, sort = TRUE)
bigram.counts
bigram.united <- bigrams.filtered %>%
unite(bigram, word1, word2, sep = " ")
bigram.united
t#trigrama
austen_books() %>%
unnest_tokens(trigram, text, token = "ngrams", n = 3) %>%
filter(!is.na(trigram)) %>%
separate(trigram, c("text1", "text2", "text3"), sep = " ") %>%
filter(!text1 %in% stop_words$word,
!text2 %in% stop_words$word,
!text3 %in% stop_words$word) %>%
count(text1, text2, text3, sort = TRUE)
# 4.1.2 Análisis de bigramas
# Este formato de un bigrama por fila es útil para los análisis exploratorios del
# texto. Como un ejemplo simple, nos pueden interesar las “calles” más comunes
# mencionadas en cada libro:
bigrams.filtered %>%
filter(word2 == "street") %>%
count(book, word1, sort = TRUE)
bigram.tf_idf <- bigram.united %>%
count(book, bigram) %>%
bind_tf_idf(bigram, book, n) %>%
arrange(desc(tf_idf))
bigram.tf_idf %>%
group_by(book) %>%
head(40) %>%
mutate(bigram  = fct_reorder(bigram, n)) %>%
ggplot(aes(
tf_idf,
bigram,
fill = book
))+
geom_col(show.legend = FALSE)+
facet_wrap(~book, ncol = 2, scales = "free")+
theme_minimal()
# 4.1.3 Uso de bigramas para proporcionar contexto en el análisis de sentimientos
bigrams.separated %>%
filter(word1 == "not") %>%
count(word1, word2, sort = TRUE)
bigram.graph <- bigram.counts %>%
filter(n > 20) %>%
graph_from_data_frame()
bigram.graph
ggraph(bigram.graph, layout = 'fr') %>%
geom_edge_link()+
geom_node_point()+
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
ggplot(bigram.graph, layout = 'fr') %>%
geom_edge_link()+
geom_node_point()+
geom_node_text(aes(label = name), vjust = 1, hjust = 1)
count_bigrams <- function(dataset) {
dataset %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% stop_words$word,
!word2 %in% stop_words$word) %>%
count(word1, word2, sort = TRUE)
}
visualize_bigrams <- function(bigrams) {
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
bigrams %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
}
library(gutenbergr)
kjv <- gutenberg_download(10)
kjv_bigrams <- kjv %>%
count_bigrams()
# filter out rare combinations, as well as digits
kjv_bigrams %>%
filter(n > 40,
!str_detect(word1, "\\d"),
!str_detect(word2, "\\d")) %>%
visualize_bigrams()
# 4.2 Contar y correlacionar pares de palabras con el paquete widyr
austen_section_words <- austen_books() %>%
filter(book == "Pride & Prejudice") %>%
mutate(section = row_number() %/% 10) %>%
filter(section > 0) %>%
unnest_tokens(word, text) %>%
filter(!word %in% stop_words$word)
austen_section_words
# count words co-occuring within sections
word_pairs <- austen_section_words %>%
pairwise_count(word, section, sort = TRUE)
word_pairs
word_pairs %>%
filter(item1 == "darcy") %>%
head(20) %>%
mutate(item2 = fct_reorder(item2, n)) %>%
ggplot(aes(
n,
item2
))+
geom_col()
#4.2.2 Correlación por pares
word.cors <-austen_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE)
word.cors %>%
filter(item1 == "pounds")
word_cors %>%
filter(item1 == "pounds") %>%
filter(item1 %in% c("elizabeth", "pounds", "married", "pride")) %>%
group_by(item1) %>%
slice_max(correlation, n = 6) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
word.cors <-austen_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE) %>%
view()
word.cors %>%
filter(item1 == "pounds")%>%
view()
word_cors %>%
filter(item1 %in% c("elizabeth", "pounds", "married", "pride")) %>%
group_by(item1) %>%
slice_max(correlation, n = 6) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
word.cors <-austen_section_words %>%
group_by(word) %>%
filter(n() >= 20) %>%
pairwise_cor(word, section, sort = TRUE)
word_cors %>%
filter(item1 %in% c("elizabeth", "pounds", "married", "pride")) %>%
group_by(item1) %>%
slice_max(correlation, n = 6) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
word.cors %>%
filter(item1 %in% c("elizabeth", "pounds", "married", "pride")) %>%
group_by(item1) %>%
slice_max(correlation, n = 6) %>%
ungroup() %>%
mutate(item2 = reorder(item2, correlation)) %>%
ggplot(aes(item2, correlation)) +
geom_bar(stat = "identity") +
facet_wrap(~ item1, scales = "free") +
coord_flip()
word.cors %>%
filter(correlation > .15) %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), repel = TRUE) +
theme_void()
library(tidyverse)
library(dplyr)
library(tidytext)
library(ggplot2)
library(igraph)
library(ggraph)
library(widyr)
library(nycflights13)
airlines <- data(airlines)
view(airlines)
airlines
airports
data_airlines <- airlines
data_airports <- airports
data_planes <- planes
data_weather <- wheater
data_weather <- weather
data_planes %>%
count(n)
data_planes %>%
count(n > 1)
view(data_planes)
data_planes %>%
count(tailnum)
data_planes %>%
count(tailnum) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
arrange(desc(tailnum))
unique(data_planes$tailnum)
unique(cut(data_planes$tailnum)
unique(cut(data_planes$tailnum))
cut(data_planes$tailnum)
data_planes %>%
count(tailnum) %>%
data_planes %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_weather
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
library(nycflights13)
weather
data_planes %>%
count(tailnum) %>%
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day, hour, origin)
data_weather <- weather %>% view()
data_planes %>%
count(tailnum) %>%
data_weather %>%
count(year, month, day)
data_planes %>%
count(tailnum)
data_weather %>%
count(year, month, day)
data_weather %>%
count(year, month, day, hour, origin)
data_weather %>%
count(year, month, day, hour, origin) %>%
filter(n>1)
data_flights <- flights
data_flights %>%
count(year, month day, flight) %>%
data_flights
data_flights %>%
count(year, month, day, flight) %>%
filter(n > 1)
data_flights %>%
count(year, month, day, tailnum) %>%
filter(n > 1)
data_flights_2 <- data_flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
data_airlines
data_flights_2 %>%
left_join(data_airlines, by = "carrier")
data_flights_2 %>%
select(-origin, -dest) %>%
left_join(data_airlines, by = "carrier")
data_flights_2 %>%
select(-origin, -dest) %>%
mutate(name = data_airlines$name[match(carrier, data_airlines$carrier)])
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
3, "x3"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
4, "y3"
)
x
y
x %>%
inner_join(y, by = "~key")
x %>%
inner_join(y, by = "key")
x %>%
left_join(y, by = "key")
x %>%
right_join(y, by = "key")
x %>%
full_join(y, by = "key")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
2, "x3",
1, "x4"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2"
)
x %>%
left_join(y, by = "key")
x <- tribble(
~key, ~val_x,
1, "x1",
2, "x2",
2, "x3",
3, "x4"
)
y <- tribble(
~key, ~val_y,
1, "y1",
2, "y2",
2, "y3",
3, "y4"
)
x %>%
left_join(y, by = "key")
data_flights_2
data_flights_2 %>%
left_join(data_weather)
data_weather
data_flights_2 %>%
left_join(data_planes, by = "tailnum")
data_flights_2
print(data_airports)
print(data_flights_2)
data_flights_2 %>%
left_join(data_airports, c("dest" = "IAH"))
data_flights_2 %>%
left_join(data_airports, c("dest" = "iah"))
data_flights_2 %>%
left_join(data_airports, c("dest" = "faa"))
data_airports
data_airports$
data_airports$dst
unique(data_airports$dst)
view(data_airports)
unique(data_flights_2$dest)
unique(data_flights_2$dest == "faa")
unique(data_flights_2$dest = "faa")
data_airports
str(data_airports)
data_airports %>%
semi_join(data_flights, c("faa" = "dest")) %>%
ggplot(aes(
lon,
lat
))+
borders("state")
data_airports %>%
semi_join(data_flights, c("faa" = "dest")) %>%
ggplot(aes(
lon,
lat
))+
borders("state")+
geom_point()+
coord_quickmap()
data_airports
view(data_airports)
data_airports %>%
semi_join(data_flights, c("faa" = "dest")) %>%
ggplot(aes(
lon,
lat,
size = alt
))+
borders("state")+
geom_point()+
coord_quickmap()
data_flights
data_flights %>%
left_join(data_airports, c("lat" , "lon"))
data_flights %>%
left_join(data_airports, c("lat" = "lat"))
data_flights %>%
semi_join(data_airports, c("lat" = "lat"))
data_flights %>%
mutate(lat = semi_join(data_airports, by = "lat"))
view(data_flights)
view(data_flights)
View(data_airports)
data_flights %>%
full_join(data_airports)
data_flights %>%
full_join(data_airports = by "faa")
data_flights %>%
left_join(data_airports = by "faa")
data_flights %>%
semi_join(data_airports , c("faa" = "dest"))
top_dest <- data_flights %>%
count(dest, sort = TRUE) %>%
head(10)
top_dest
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()
top_dest <- data_flights %>%
count(dest, sort = TRUE) %>%
head(20)
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()+
geom_smooth()
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()+
geom_smooth(method = 'loess')
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()+
geom_smooth(method = 'lm')
top_dest %>%
ggplot(aes(
dest,
n
))+
geom_point()+
geom_smooth(method = 'lm', formula = 'y ~ x')
top_dest %>%
ggplot(aes(
n,
dest
))+
geom_point()+
geom_smooth(method = 'lm', formula = 'y ~ x')
top_dest %>%
mutate(n = fct_reorder(n)) %>%
ggplot(aes(
n,
dest
))+
geom_point()+
geom_smooth(method = 'lm', formula = 'y ~ x')
top_dest %>%
ggplot(aes(
n,
dest
))+
geom_point()+
geom_smooth(method = 'lm', formula = 'y ~ x')
top_dest %>%
ggplot(aes(
n,
dest
))+
geom_point()+
geom_smooth()
top_dest %>%
ggplot(aes(
n,
dest
))+
geom_point()
data_flights %>%
filter(dest %in% top_dest$dest )
data_flights %>%
semi_join(top_dest)
data_flights %>%
anti_join(data_planes, by = "tailnum")
data_flights %>%
anti_join(data_planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
